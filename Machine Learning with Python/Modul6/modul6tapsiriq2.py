# -*- coding: utf-8 -*-
"""Modul6Tapsiriq2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J7WJM6qfT2W0fVKkWuG-BBj1Pm2LbWi5
"""



# LazÄ±m olan kitabxanalar
import streamlit as st
import pandas as pd
import warnings
import pickle
import time
import PIL
import re
import sklearn

# Potensial xÉ™bÉ™rdarlÄ±qlarÄ±n filterlÉ™nmÉ™si
warnings.filterwarnings(action = 'ignore')

# Datasetin yÃ¼klÉ™nmÉ™si
df = pd.read_csv(filepath_or_buffer = 'wine-clustering.csv')

# SÃ¼tun adlarÄ±nÄ±n kiÃ§ildilmÉ™si vÉ™ potensial boÅŸluqlarÄ±n silinmÉ™si
df.columns = [re.sub('\s+', '_', x.lower()) for x in df.columns]

# Modelin yÃ¼lÉ™nmÉ™si
with open(file = 'model.pkl', mode = 'rb') as pickled_model:
    model = pickle.load(file = pickled_model)

print(model)

# ÅžÉ™kilin yÃ¼klÉ™nmÉ™si
wine_image = PIL.Image.open(fp = 'wine.jpg')

# Æsas sÉ™hifÉ™nin yaradÄ±lmasÄ±
interface = st.container()

# Æsas sÉ™hifÉ™yÉ™ elementlÉ™rin daxil edilmÉ™si
with interface:
    # SÉ™hifÉ™nin adÄ±nÄ±n gÃ¶stÉ™rilmÉ™si (sÉ™hifÉ™ adÄ± --> Wine Quality Clustering)
    st.title(body = 'Wine Quality Clustering')

    # ÅžÉ™kilin gÃ¶stÉ™rilmÉ™si
    st.image(image = wine_image)

    # BaÅŸlÄ±ÄŸÄ±n gÃ¶stÉ™rilmÉ™si (baÅŸlÄ±q adÄ± --> Project Description)
    st.header(body = 'Project Description')

    # Proyekt haqqÄ±nda informasiyanÄ±n verilmÉ™si
    st.markdown(body = f"""This is a machine learning project in which wines are clustered based on their quality.
    KMeans algoritm was used to build the model with **{df.shape[1]}** features. Principal Component Analysis was
    used to reduce dimensionality whereas the number of clusters was identified using Elbow method.""")

    # KiÃ§ik baÅŸlÄ±ÄŸÄ±n gÃ¶stÉ™rilmÉ™si (kiÃ§ik baÅŸlÄ±q adÄ± --> Input Features)
    st.subheader(body = 'Input Features')

    # DÃ¼z xÉ™ttin Ã§É™kilmÉ™si
    st.markdown(body = '***')

    # AsÄ±lÄ± olmayan dÉ™yiÅŸÉ™nlÉ™rin yaradÄ±lmasÄ± (BÃ¼tÃ¼n asÄ±lÄ± olmayan dÉ™yiÅŸÉ™nlÉ™ri st.slider() metodu ilÉ™ yarat)
    alcohol = st.slider(label = 'Alcohol', min_value = 1, max_value = 50, value = int(df.alcohol.mean()))
    malic_acid = st.slider(label = 'Malic Acid', min_value = 0, max_value = 10, value = int(df.malic_acid.mean()))
    ash = st.slider(label = 'Ash', min_value = 0, max_value = 10, value = int(df.ash.mean()))
    ash_alcanity = st.slider(label = 'Ash Alcanity', min_value = 1, max_value = 50, value = int(df.ash_alcanity.mean()))
    magnesium = st.slider(label = 'Magnesium', min_value = 50, max_value = 200, value = int(df.magnesium.mean()))
    total_phenols = st.slider(label = 'Total Phenols', min_value = 0, max_value = 10, value = int(df.total_phenols.mean()))
    flavanoids = st.slider(label = 'Flavanoids', min_value = 0, max_value = 10, value = int(df.flavanoids.mean()))
    nonflavanoid_phenols = st.slider(label = 'Nonflavanoid Phenols', min_value = 0, max_value = 10, value = int(df.nonflavanoid_phenols.mean()))
    proanthocyanins = st.slider(label = 'Proanthocyanins', min_value = 0, max_value = 10, value = int(df.proanthocyanins.mean()))
    color_intensity = st.slider(label = 'Color Intensity', min_value = 1, max_value = 10, value = int(df.color_intensity.mean()))
    hue = st.slider(label = 'Hue', min_value = 0, max_value = 10, value = int(df.hue.mean()))
    od280 = st.slider(label = 'Od280', min_value = 0, max_value = 10, value = int(df.od280.mean()))
    proline = st.slider(label = 'Proline', min_value = 100, max_value = 5000, value = int(df.proline.mean()))

    # DÃ¼z xÉ™ttin Ã§É™kilmÉ™si
    st.markdown(body = '***')

    # KiÃ§ik baÅŸlÄ±ÄŸÄ±n gÃ¶stÉ™rilmÉ™si (kiÃ§ik baÅŸlÄ±q adÄ± --> Making Predictions)
    st.subheader(body = 'Making Predictions')

    # LÃ¼gÉ™t data strukturunun yaradÄ±lmasÄ±
    data_dicionary = {'alcohol':alcohol,
                       'malic_acid':malic_acid,
                       'ash':ash,
                       'ash_alcanity':ash_alcanity,
                       'magnesium':magnesium,
                       'total_phenols':total_phenols,
                       'flavanoids':flavanoids,
                       'nonflavanoid_phenols':nonflavanoid_phenols,
                       'proanthocyanins':proanthocyanins,
                       'color_intensity':color_intensity,
                       'hue':hue,
                       'od280':od280,
                       'proline':proline}

    # LÃ¼gÉ™t data strukturunun DataFrame data strukturuna Ã§evirilmÉ™si
    input_features = pd.DataFrame(data = data_dicionary, index = [0])

    # Proqnoz adlarÄ±nÄ±n yaradÄ±lmasÄ±
    cluster_labels = {0:'first', 1:'second', 2:'third', 3:'fourth', 4:'fifth', 5:'sixth', 6:'seventh', 7:'eighth', 8:'nineth', 9:'tenth'}

    # Predict adÄ±nda dÃ¼ymÉ™nin yaradÄ±lmasÄ±
    if st.button('Predict'):
        # DÃ¶ngÃ¼nÃ¼n yaradÄ±lmasÄ±
        with st.spinner(text = 'Sending input features to model...'):
            # Ä°ki saniyÉ™lik pauzanÄ±n yaradÄ±lmasÄ±
            time.sleep(2)

        # Klasterin model tÉ™rÉ™findÉ™n proqnozlaÅŸdÄ±rÄ±lmasÄ±
        predicted_cluster = model.predict(X = input_features)

        # Klasterin adÄ±nÄ±n É™ldÉ™ olunmasÄ±
        cluster_label = cluster_labels.get(predicted_cluster[0])

        # Proqnozun verilmÉ™si ilÉ™ baÄŸlÄ± mesajÄ±n gÃ¶stÉ™rilmÉ™si
        st.success('Prediction is ready')

        # Bir saniyÉ™lik pauzanÄ±n yaradÄ±lmasÄ±
        time.sleep(1)

        # Proqnozun istifadÉ™Ã§iyÉ™ gÃ¶stÉ™rilmÉ™si
        st.markdown(f'Model output: Wine belongs to the **{cluster_label}** cluster')